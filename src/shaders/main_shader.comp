#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) uniform InputBuffer1 {
    mat4 lookDir;

    vec4 initPos;
    vec4 initDir;

	float xPosMultiplier;
	float yPosMultiplier;
	
    float xDirMultiplier;
	float yDirMultiplier;

    int sampleAmount_out;
    int sampleAmount_in;

    int mode; // Lakše nego poravnavati dva boola.
    // 0 - ništa, 1 - Rayleigh, 2 - Mie, 3 - oboje

} camera_info;


layout(set = 0, binding = 1) uniform InputBuffer2 {
    // Sunce
    float sun_distance;
    float sun_radius;
    float sun_angle;

    // Planet
    float planet_radius;

    // Atmosfera
    float atmosphere_surface_pressure_pa;
	float atmosphere_average_distance;
	float atmosphere_average_distance_aerosol;
    float atmosphere_mie_asymmetry_const;
	float atmosphere_upper_limit;

    float atmosphere_temperature;
	float atmosphere_molar_mass;

	float atmosphere_refractivity;
    float atmosphere_atom_radius;

    // Dodatni parametri
    double K;

    float aerosol_density_mul;

    float r_wavelen;
    float g_wavelen;
    float b_wavelen;
    float light_intensity;
    vec4 light_color; 

} atmosphere_info;

layout(set = 0, binding = 2, rgba8) uniform image2D outputPixels;


// Raèunanje integrala
float outScatter_partial(vec3 start, vec3 end, float average_distance){
    float result = 0;

    for(int j = 0; j < camera_info.sampleAmount_out; j++){
        // Pozicija toèke uzorka na liniji
        vec3 pos = (start * (1-(float(j)/(camera_info.sampleAmount_out-1))) + end * (float(j)/(camera_info.sampleAmount_out-1))); // Interpolacija

        float distance_from_center = length(pos);
        float distance_from_surface = distance_from_center - atmosphere_info.planet_radius;
                                    
        result += exp(-distance_from_surface/average_distance) * length(end - start)/camera_info.sampleAmount_out;
    }

    return result;
}

struct ray_sphere_result {
    bool intersect;
    float t_min;
    float t_max;
};

// Provjera pogaða li zraka sferu i, ako da, u kojim parametarskim toèkama
ray_sphere_result ray_sphere_intersect(vec3 ray_pos, vec3 ray_dir, vec3 sphere_pos, float sphere_r){
    ray_sphere_result res;
    res.intersect = false;

    vec3 ray_dir_n = normalize(ray_dir);
    vec3 pos_diff = ray_pos - sphere_pos;

    float a = 1;
    float b = 2 * dot(ray_dir_n, vec3(pos_diff));
    float c = dot(vec3(pos_diff),vec3(pos_diff)) - (sphere_r)*(sphere_r);

    // Diskriminanta
    float d = b*b - 4*a*c;

    if (d > 0){ // Postoji presjek i dogaða se u više od 1 toèke
        res.intersect = true;
        // Raèunanje rješenja
        float t1 = (-b + sqrt(d)) / (2*a);
        float t2 = (-b - sqrt(d)) / (2*a);
                
        res.t_min = min(t1,t2); // Toèke veæe od 0 nalaze se ispred poèetne pozicije zrake
        res.t_max = max(t1,t2); 
    }

    return res;
}




void main(){

    // dohvati globalni ID jedinice - jedna jedinica se izvodi po pikselu slike
    uint gIDx = gl_GlobalInvocationID.x; // Odgovara x i y koordinatama slike
    uint gIDy = gl_GlobalInvocationID.y;
    uint gID = gIDx + gIDy * imageSize(outputPixels).x;

    // Raèunanje pozicije i smjera zrake na temelju pozicije kamere i njezinoj širini pogleda (izraženom kao faktor nagiba)

    // TEKSTURA: DESNO JE +X, DOLJE JE +Y
    // RAÈUNANJE: DESNO JE +X, DOLJE JE -Y
    // Obrni y koordinatu
    vec3 initPos  = mat3(camera_info.lookDir) * vec3((float(gIDx) - imageSize(outputPixels).x/2.0)*camera_info.xPosMultiplier, /*Ovaj minus je jedan od najbitnijih dijelova koda koda ->*/-(float(gIDy) - imageSize(outputPixels).y/2.0)*camera_info.yPosMultiplier, 0.0) + camera_info.initPos.xyz;
    vec3 velocity =                             vec3((float(gIDx) - imageSize(outputPixels).x/2.0)*camera_info.xDirMultiplier, /*                                          (ovaj isto) ->*/-(float(gIDy) - imageSize(outputPixels).y/2.0)*camera_info.yDirMultiplier, 0.0) + camera_info.initDir.xyz;


    // Rotacija zrake zajedno s kamerom
    vec4 velocity_2 = camera_info.lookDir * vec4(velocity,1.0);
    velocity = vec3(velocity_2 / velocity_2.w);
    
    // Normaliziran smjer zrake
    vec3 velocity_n = normalize(velocity);

    // Centar planeta je središte koordinatnog sustava, tj. 0,0,0

    
    vec4 floor_color = vec4(0.3,0.3,0.3,0);
    vec4 center_col = vec4(0.0,0.0,0.0,0);
    if (length(initPos) < atmosphere_info.planet_radius){ // Rani završetak ako je zraka u planetu
        
        float scale = dot(velocity_n, normalize(initPos))/2.0 + 0.5;

        // Smjer van planeta je svjetliji tako da se lakše orijentirati i izaæi
        vec4 mixed_col = floor_color * scale + center_col * (1-scale);

        imageStore(outputPixels, ivec2(gIDx, gIDy), mixed_col);
        return;
    }


    // Dodavanje boje površine planeta
    vec3 floor_reflect = vec3(0,0,0);



    bool intersecting_planet = false;
    float planet_t_min = 0; 
    float planet_t_max = 0; 
    vec3 planet_pos = vec3(0,0,0);


    // Provjera sijeèe li zraka planet
    ray_sphere_result planet_intersect = ray_sphere_intersect(initPos, velocity_n, planet_pos, atmosphere_info.planet_radius);

    // Postoji presjek i ispred zrake je
    if (planet_intersect.intersect && planet_intersect.t_min > 0){
        intersecting_planet = true;
        planet_t_min = planet_intersect.t_min; // Toèke u kojima zraka presijeca planet;
        planet_t_max = planet_intersect.t_max;

        floor_reflect = vec3(floor_color) * 0.0001;
    }

    vec3 planet_t_pos = initPos + normalize(velocity) * planet_t_min; // Pozicija presjeka i takoðer normala



    {
        

        bool looking_at_sun = false;
        // Sunce æe uvijek biti na xy ravnini
        vec3 sun_pos = vec3(cos(radians(atmosphere_info.sun_angle)), sin(radians(atmosphere_info.sun_angle)),0) * atmosphere_info.sun_distance;
        // Poèetna (upadna) zraka sunca
        vec3 starting_ray_light = vec3((atmosphere_info.light_color * atmosphere_info.light_intensity)); // 70, 20, 10

        // Provjera pogaða li zraka sunce
        ray_sphere_result sun_intersect = ray_sphere_intersect(initPos, velocity_n, sun_pos, atmosphere_info.sun_radius);

        if (sun_intersect.intersect && sun_intersect.t_min > 0 && !intersecting_planet){
            looking_at_sun = true; // Gledamo direktno u sunce
        }


        {
            float atmosphere_radius = atmosphere_info.planet_radius + atmosphere_info.atmosphere_upper_limit;

            // Provjera presjeka s atmosferom planeta
            ray_sphere_result atmosphere_intersect = ray_sphere_intersect(initPos, velocity_n, planet_pos, atmosphere_radius);
            bool intersecting_atmosphere = false;

            if (atmosphere_intersect.intersect && (atmosphere_intersect.t_min > 0 || atmosphere_intersect.t_max > 0)){
                // Poèni s simulacijom atmosfere
                intersecting_atmosphere = true;
            }
            else{ // U svemiru smo, nema nièeg zanimljivog za crtat
                if (looking_at_sun){
                    imageStore(outputPixels, ivec2(gIDx, gIDy), vec4(starting_ray_light,1));
                }
                else{
                    imageStore(outputPixels, ivec2(gIDx, gIDy), vec4(0,0,0,0));
                }
                return;
            }

            // Poèni s simulacijom atmosfere
            if (intersecting_atmosphere) {
                float t_min = atmosphere_intersect.t_min;
                float t_max = atmosphere_intersect.t_max;
                

                if (t_min < 0) t_min = 0; // Ako je prva toèka iza poèetka zrake stavi je na poèetak


                // Sluèaj gdje se zraka odbija od površinu planeta
                bool planet_reflection = false;
                if (intersecting_planet && t_max > planet_t_min) planet_reflection = true;
                if (planet_reflection) t_max = planet_t_min; // Ako zraka prolazi kroz planet ogranièi uzorke na atmosferu prije ulaska


                // Finalna boja
                vec4 output_color = vec4(0,0,0,0);
                // Ukupno svjetlo koje kamera dobiva
                vec3 total_light = vec3(0,0,0);

                // Mapiranje simuliranih zraka svjetlosti na komponente boje
                vec3 red_wave_color   = vec3(1.0,0.0,0.0);
                vec3 green_wave_color = vec3(0.0,1.0,0.0);
                vec3 blue_wave_color  = vec3(0.0,0.0,1.0);

                float red_wavelenght   = atmosphere_info.r_wavelen * 0.000000001; // nanometri
	            float green_wavelenght = atmosphere_info.g_wavelen * 0.000000001;
	            float blue_wavelenght  = atmosphere_info.b_wavelen * 0.000000001;
                
                float pi = 3.141592654;


                // Uzimanje toèaka uzorka
                for(int i = 1; i < camera_info.sampleAmount_in; i++){
                    
                    // Ukupno svjetlo koje ova zraka pridonosi
                    vec3 total_ray_light = vec3(0,0,0);

                    // Pozicija toèke uzorka na liniji
                    float t_smpl = (t_min * (1-(float(i)/(camera_info.sampleAmount_in-1))) + t_max * (float(i)/(camera_info.sampleAmount_in-1))); // Interpolacija
                    
                    // Pozicija toèke uzorka u prostoru
                    vec3 t_pos = initPos + normalize(velocity) * t_smpl;

                    float distance_from_center = length(t_pos);
                    float distance_from_surface = distance_from_center - atmosphere_info.planet_radius;


                   
                    // Ulazni vektor od toèke prema suncu - smjer je obrnut jer je lakše odrediti presjek
                    vec3 ray_sun_vector = sun_pos - t_pos;
                   
                    // Provjera presjeka s planetom - ako ga ima, ne doprinosi svjetlo
                    ray_sphere_result sample_planet_intersect = ray_sphere_intersect(t_pos, normalize(ray_sun_vector), planet_pos, atmosphere_info.planet_radius);

                    bool hit_surface = false;
                    if (sample_planet_intersect.intersect && sample_planet_intersect.t_max + 0.1 > 0){
                        hit_surface = true;
                    }

                    // Kolièina svjetla koje doðe do toèke uzorka
                    vec3 in_scatter_light = vec3(0,0,0);

                    //float avg_wavelen = (red_wavelenght + green_wavelenght + blue_wavelenght) / 3;
                    // Konstantna valna duljina za aproksimaciju Mie raspršivanja
                    float const_wavelen = (900 * 0.000000001);
                    float mie_scatter_constant = const_wavelen * const_wavelen * const_wavelen * const_wavelen;


                    // Koristi se za sunèevo svjetlo i površinu planeta
                    vec3 arriving_light = vec3(0,0,0);


                    // ULAZNO RASPRŠIVANJE   --------------------------------------------------------------------------------------------------
                    // koliko svjetlosti se dobije raspršivanjem sunèevih zraka do uzroène toèke



                    // Obièan sluèaj - nešto svjetlosti se odbije kroz atmosferu prema oèištu
                    if (!planet_reflection || (i < camera_info.sampleAmount_in-1 && !hit_surface)){ 


                        

                        // Traži se presjek sunèeve zrake s atmosferom
                        ray_sphere_result sample_atmosphere_intersect = ray_sphere_intersect(t_pos, normalize(ray_sun_vector), planet_pos, atmosphere_radius);

                        if (sample_atmosphere_intersect.intersect){
                            // Jedini put kada ovo ne bi trebalo vrijediti je na samom rubu atmosfere u nekim rijetkim sluèajevima

                            // Bitan je samo t_max ovdje
                            float t_max_2 = sample_atmosphere_intersect.t_max;
                            float t_min_2 = sample_atmosphere_intersect.t_min;

                            vec3 ray_light = starting_ray_light;

                            // Zraka svjetlosti se gubi od sunca do zrake gledanja


                            // Drugi set uzroènih toèaka - sada na zraci prema suncu
                            // Odreðuje se srednja gustoæa zraka na putu zrake
                            float average_density_ratio = outScatter_partial(t_pos, t_pos + normalize(ray_sun_vector) * t_max_2, atmosphere_info.atmosphere_average_distance);
                            float average_density_ratio_mie = outScatter_partial(t_pos, t_pos + normalize(ray_sun_vector) * t_max_2, atmosphere_info.atmosphere_average_distance_aerosol);
                                                        
                            // Raèunanje Rayleighovih jednadžbi prema formulama iz Nishitinog rada
                            
                            // Optièka dubina atmosfere (raèunajuæi samo mikroskopske èestice) (funkcija t u originalnoj jednadžbi)
                            float rayleigh_part_1_red   = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (red_wavelenght   * red_wavelenght   * red_wavelenght   * red_wavelenght   ));
                            float rayleigh_part_1_green = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (green_wavelenght * green_wavelenght * green_wavelenght * green_wavelenght ));
                            float rayleigh_part_1_blue  = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (blue_wavelenght  * blue_wavelenght  * blue_wavelenght  * blue_wavelenght  ));
                            // Optièka dubina atmosferskih aerosola
                            float mie_part_1 =  4 * pi * average_density_ratio_mie * (float(atmosphere_info.K) / (mie_scatter_constant));


                            arriving_light.r = ray_light.r * exp(-rayleigh_part_1_red  );
                            arriving_light.g = ray_light.g * exp(-rayleigh_part_1_green);
                            arriving_light.b = ray_light.b * exp(-rayleigh_part_1_blue );
                            

                            // Množenje s kutom
                            double cos_sun_angle = dot(normalize(ray_sun_vector), normalize(velocity));

                            // Fazne funkcije
                            float angle_const_rayleigh = float(3.0/(4.0) * (1 + cos_sun_angle * cos_sun_angle));

                            // Ovo je karakteristièan dio Mie aproksimacije - bez ovog bi izgledalo dosta slièno Rayleighovom raspršivanju
                            float asymmetry_const = atmosphere_info.atmosphere_mie_asymmetry_const;
                            float angle_const_mie = 3.0*(1.0-asymmetry_const*asymmetry_const)/(2.0*(2.0 + asymmetry_const*asymmetry_const)) * float(1 + cos_sun_angle * cos_sun_angle)/pow((1 + asymmetry_const*asymmetry_const - float(2*asymmetry_const*cos_sun_angle)), 1.5);

                            // Odreðivanje gustoæe zraka oko toèke uzorka - jednako onom integralu ali raèuna se samo jedanput
                            float density_ratio = exp(-(length(t_pos) - atmosphere_info.planet_radius)/atmosphere_info.atmosphere_average_distance);

                            float rayleigh_part_2_red   = 0;
                            float rayleigh_part_2_green = 0;
                            float rayleigh_part_2_blue  = 0;
                            
                            if ((camera_info.mode & 1) != 0) {
                                // Raèunanje ukupnog doprinosa ulazne zrake toèci uzorka - ulazna zraka još se jednom rasprši ali ovaj put se uzme raspršena komponenta
                                rayleigh_part_2_red   = ray_light.r  * angle_const_rayleigh * density_ratio * (float(atmosphere_info.K) / (red_wavelenght   * red_wavelenght   * red_wavelenght   * red_wavelenght   )) * exp(-rayleigh_part_1_red);
                                rayleigh_part_2_green = ray_light.g  * angle_const_rayleigh * density_ratio * (float(atmosphere_info.K) / (green_wavelenght * green_wavelenght * green_wavelenght * green_wavelenght )) * exp(-rayleigh_part_1_green);
                                rayleigh_part_2_blue  = ray_light.b  * angle_const_rayleigh * density_ratio * (float(atmosphere_info.K) / (blue_wavelenght  * blue_wavelenght  * blue_wavelenght  * blue_wavelenght  )) * exp(-rayleigh_part_1_blue);
                            }

                            float mie_part_2 = 0;
                            if ((camera_info.mode & 2) != 0) {
                                // Isto to ali za Mie
                                mie_part_2 = length(ray_light) * angle_const_mie * density_ratio * (float(atmosphere_info.K) / (mie_scatter_constant)) * exp(-mie_part_1) * atmosphere_info.aerosol_density_mul;
                            }

                            // Zbrajanje svjetala
                            in_scatter_light += vec3(rayleigh_part_2_red, rayleigh_part_2_green, rayleigh_part_2_blue) + vec3(mie_part_2, mie_part_2, mie_part_2);
                                
                        }
                    }
                    // Poseban sluèaj - odbijanje od površine planeta
                    // Raèuna se posebno samo za zadnju toèku uzorka te se pribroji 
                    else if (i == camera_info.sampleAmount_in-1){
                        ray_sphere_result sample_atmosphere_intersect = ray_sphere_intersect(t_pos, normalize(ray_sun_vector), planet_pos, atmosphere_radius);

                        if (sample_atmosphere_intersect.intersect){
                            // Jedini put kada ovo ne bi trebalo vrijediti je na samom rubu atmosfere u nekim rijetkim sluèajevima


                            float t_max_2 = sample_atmosphere_intersect.t_max;
                            float t_min_2 = sample_atmosphere_intersect.t_min;

                            vec3 ray_light = starting_ray_light;

                            float average_density_ratio = outScatter_partial(t_pos, t_pos + normalize(ray_sun_vector) * t_max_2, atmosphere_info.atmosphere_average_distance);
                            float average_density_ratio_mie = outScatter_partial(t_pos, t_pos + normalize(ray_sun_vector) * t_max_2, atmosphere_info.atmosphere_average_distance_aerosol);
                            
                            // Primjenjuje se samo out-scattering - koliko svjetlosti se izgubi raspršivanjem pri putovanju prema toèci
                            float rayleigh_part_1_red   = 0;
                            float rayleigh_part_1_green = 0;
                            float rayleigh_part_1_blue  = 0;
                            
                            if ((camera_info.mode & 1) != 0) {
                                rayleigh_part_1_red   = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (red_wavelenght   * red_wavelenght   * red_wavelenght   * red_wavelenght   ));
                                rayleigh_part_1_green = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (green_wavelenght * green_wavelenght * green_wavelenght * green_wavelenght ));
                                rayleigh_part_1_blue  = 4 * pi * average_density_ratio * (float(atmosphere_info.K) / (blue_wavelenght  * blue_wavelenght  * blue_wavelenght  * blue_wavelenght  ));
                            }
                            float mie_part_1 = 0;
                            if ((camera_info.mode & 2) != 0) {
                                mie_part_1 =  4 * pi * average_density_ratio_mie * (float(atmosphere_info.K) / (mie_scatter_constant)) * atmosphere_info.aerosol_density_mul;
                            }

                            // Poseban dio - svjetlo se pridoda toèci refleksije umjesto ukupnom zraèenju
                            arriving_light.r = ray_light.r * exp(-rayleigh_part_1_red   - mie_part_1);
                            arriving_light.g = ray_light.g * exp(-rayleigh_part_1_green - mie_part_1);
                            arriving_light.b = ray_light.b * exp(-rayleigh_part_1_blue  - mie_part_1);
                        }
                    
                    }
                    
                    // Ako se gleda direktno u sunce ne primjenjuje se ulazno raspršivanje nego samo izlazno na direktno dodanoj svjetlost
                    if (looking_at_sun) in_scatter_light = arriving_light;
                    
                    // Zadnjoj toèci uzorka se dodaje difuzno odbijanje od površine planeta 
                    if (planet_reflection && i == camera_info.sampleAmount_in-1) in_scatter_light = floor_reflect * arriving_light * max(0,dot(normalize(sun_pos), normalize(planet_t_pos)));




                    // IZLAZNO RASPRŠIVANJE  --------------------------------------------------------------------------------------------------

                    // Zraka sad putuje od uzroène toèke do oèišta i pritom gubi nešto svjetla usput kroz atmosferu

                    {
                        // Slièno 1. dijelu jednadžbe ulaznog raspršivanja

                        // Gustoæa dijelova atmosfere
                        float average_density_ratio_2 = outScatter_partial(initPos + normalize(velocity) * t_min, initPos + normalize(velocity) * t_smpl, atmosphere_info.atmosphere_average_distance);
                        float average_density_ratio_2_mie = outScatter_partial(initPos + normalize(velocity) * t_min, initPos + normalize(velocity) * t_smpl, atmosphere_info.atmosphere_average_distance_aerosol);

                        float rayleigh_part_1_red   = 0;
                        float rayleigh_part_1_green = 0;
                        float rayleigh_part_1_blue  = 0;

                        if ((camera_info.mode & 1) != 0){
                            // Optièka dubina mikroskopskog dijela atmosfere
                            rayleigh_part_1_red   = 4 * pi * average_density_ratio_2 * (float(atmosphere_info.K) / (red_wavelenght   * red_wavelenght   * red_wavelenght   * red_wavelenght   ));
                            rayleigh_part_1_green = 4 * pi * average_density_ratio_2 * (float(atmosphere_info.K) / (green_wavelenght * green_wavelenght * green_wavelenght * green_wavelenght ));
                            rayleigh_part_1_blue  = 4 * pi * average_density_ratio_2 * (float(atmosphere_info.K) / (blue_wavelenght  * blue_wavelenght  * blue_wavelenght  * blue_wavelenght  ));
                        }

                        float mie_part_1 = 0;
                        if ((camera_info.mode & 2) != 0){
                            // Optièka dubina aerpolnog dijela atmosfere
                            mie_part_1 =  4 * pi * average_density_ratio_2_mie * (float(atmosphere_info.K) / (mie_scatter_constant)) * atmosphere_info.aerosol_density_mul;
                        }

                        total_ray_light.r = in_scatter_light.r * exp(-rayleigh_part_1_red   - mie_part_1);
                        total_ray_light.g = in_scatter_light.g * exp(-rayleigh_part_1_green - mie_part_1);
                        total_ray_light.b = in_scatter_light.b * exp(-rayleigh_part_1_blue  - mie_part_1);

                        // Dodavanje pridonosa ove toèke uzorka finalnom svjetlu
                        // U originalnoj jednadžbi total_ray_light bio bi Ipv, a total_light Iv
                        total_light += total_ray_light * (t_max-t_min)/camera_info.sampleAmount_in;
                    }
                    
                }

                // Miješanje boja
                total_light = total_light.r * red_wave_color + total_light.g * green_wave_color + total_light.b * blue_wave_color;

                output_color = vec4(total_light,1);

                // Formatiranje - iz zapetljanih razloga formatiranja slike izlazne komponente piksela su obrnute
                vec4 output_color_formatted = vec4(output_color.b, output_color.g, output_color.r, 0); 

                // Završno spremanje rezultata
                imageStore(outputPixels, ivec2(gIDx, gIDy), output_color_formatted); 
                return;
            }
            else{ 
            // Ne bi se trebalo doæi ovdje (kod bi veæ trebao pokupiti drugi sluèaj) ali za svaki sluèaj
                if (looking_at_sun){
                    imageStore(outputPixels, ivec2(gIDx, gIDy), vec4(starting_ray_light,1));
                }
                else{
                    imageStore(outputPixels, ivec2(gIDx, gIDy), vec4(0,0,0,0));
                }
                
                return;
            }

            
            return;
        }

       
    }

	

	
}